# docker-compose.yml
version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    networks:
      - collab-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
      - '9093:9093'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - collab-network
    healthcheck:
      test:
        [
          'CMD',
          'kafka-topics',
          '--bootstrap-server',
          'localhost:9092',
          '--list',
        ]
      interval: 30s
      timeout: 10s
      retries: 5

  api-gateway:
    build:
      context: .
      dockerfile: apps/api-gateway/Dockerfile
    ports:
      - '3000:3000' # HTTP API
      - '3001:3001' # TCP Microservice
    environment:
      - NODE_ENV=production
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:5173}
      - KAFKA_BROKERS=${KAFKA_BROKERS_DOCKER:-kafka:9092}
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - collab-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "require('http').get('http://localhost:3000/auth/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  auth-service:
    build:
      context: .
      dockerfile: apps/auth-service/Dockerfile
    ports:
      - '3002:3002' # TCP Microservice
    environment:
      - NODE_ENV=production
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_here}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY:-${SUPABASE_SERVICE_KEY}}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY:-${SUPABASE_ANON_KEY}}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-dummy_client_id}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-dummy_client_secret}
      - GOOGLE_CALLBACK_URL=${GOOGLE_CALLBACK_URL:-http://localhost:3000/auth/google/callback}
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - collab-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "require('net').createConnection(3002, '0.0.0.0').on('connect', () => process.exit(0)).on('error', () => process.exit(1))",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  collab-network:
    driver: bridge
